###
### This is a dnscol configuration file, in libUCW config syntax
###
### For details of the syntax, see http://www.ucw.cz/libucw/doc/ucw/config.html
### Note that the variable names are case-insensitive
###

### Collector configuration

dnscol {

    ### The packets are grouped in "frames" for queueing etc.
    ### Maximum frame duration in seconds before a new one is created.
    ### The threads sync at least this often, so do not se too high.
    max_frame_duration 1.0

    ### Maximum size (in bytes) of the frame before a new frame is created.
    max_frame_size 256K

    ### Maximum length of the inter-thread queues in frames
    max_queue_len 8

    ### The period in which internal statistics are logged
    report_period 60


    ### Input libtrace URI for online capture (when no pcaps are given on
    ### the command line). See http://www.wand.net.nz/trac/libtrace/wiki/SupportedTraceFormats
    # input_uri "ring:wlp3s0"
    # input_uri "ring:lo"

    ### Input PBF filter. The collector should see only DNS packets after this filter.
    input_filter "port 53"

    ### Set the interface in promiscuous mode
    input_promiscuous 1

    ### Limit the length of captured packet data. Use -1 for no limit.
    input_snaplen -1


    ### Invalid packets are optionally dumped to a pcap file
    ### Dump file name or pattern, strftime(3) time format tags are expanded on file creation.
    #dump_path_fmt "fail-%Y%m%d-%H%M%S.pcap.gz"

    ### The dump files can be periodically rotated, use 0 for no rotation.
    dump_period 0

    ### Compression level and type. Here, "none gzip bz2 lzo xz" are valid. 
    dump_compress_level 4
    dump_compress_type gzip

    ### Rate limit of packet dumping in bytes/second. Use 0 for no limit (default).
    ### Temporary bursts fitting within the rate long-term are allowed. 
    dump_rate_limit 10K


    ### The interval for ifnding request-response matches (in seconds)
    ### Note that this may increase memory consumption significantly
    ### (together with high packet frequency)
    match_window 5.0


    ### Common output file pattern, expanded with strftime(3) on opening.
    ### Use "" for stdout (default).
    #output_path_fmt "data-%Y%m%d-%H%M%S.csv.gz"
    output_path_fmt "data-%Y%m%d-%H%M%S.csv"

    ### The output may be piped via this command before being written to the file above.
    ### May be used for any  compression, but also for sending to an online processing etc.
    #output_pipe_cmd "python generate_stats.py -S example.com:8888"
    #output_pipe_cmd "gzip -4"

    ### The output files can be periodically rotated, use 0 for no rotation.
    ### Note that the pipe command is restarted for every output file.
    output_period 0

    ### Output format and type. Currently only "csv" is supported.
    output_type csv


    ### The CSV output does NOT follow RFC 4180 - the data is not enclosed in quotes but
    ### rather the problematic values (separator, newline, non-ASCII, ...)
    ### are escaped with "\". See README.md for details.

    ### CSV output separator character. The default is "|".
    ### Note: some EDNS fields use "," as separator, and while the "," is correctly
    ### escaped in that case, other characters avoid this need, so "|" was chosen.
    csv_separator "|"

    ### Begin every file with single-line header of field names
    ### Note that some programs (e.g. Impala) fo not handle these well
    csv_inline_header 0

    ### For every output file, an optional external header file may be written if set.
    #csv_external_header_path_fmt "data-%Y%m%d-%H%M%S.header.csv"

    ### The features and feature groups to record. The default is no features (!).
    ### Note that the column order in CSV file is fixed and these are just flags!
    ### See README.md for individual fields. The full list is: 
    ###   timestamp delay_us req_dns_len resp_dns_len req_net_len resp_net_len
    ###   client_addr client_port server_addr server_port net_proto net_ipv net_ttl req_udp_sum
    ###   id qtype qclass opcode rcode flags qname rr_counts edns

    csv_fields time delay_us req_dns_len resp_dns_len req_net_len resp_net_len \
               client_addr client_port server_addr server_port net_proto net_ipv net_ttl req_udp_sum \
               id qtype qclass opcode rcode flags qname rr_counts edns
}

### Logging config

logging {
  
  ### One default stream logging to stderr

  stream {
    name default

    ### When it should log the messages to a file, a name of the file should be specified.
    ### Escape sequences for current date and time as described in strftime(3) can be used.
    #filename        dnscol-%Y%m%d.log

    ### Let stderr of the program (and any subprocesses) point to this file-based log_stream.
    #stderrfollows   1

    ### If you need to log to stderr or another already opened descriptor,
    ### you can specify its number.
    filedesc        2

    ### Instead of a file, a syslog facility can be specified. See syslog(3) for an explanation.
    #syslogfacility  daemon

    types:reset default spam
  
    ### Configure the desired levels (":reset" clears the defaults)
    ### All the levels are: info warn error fatal debug
    levels:reset info warn error fatal

    ### Limit the rate of spam (potentially very frequent) messages
    limit {
      types spam

      ### Rate per second
      rate 5

      ### Number of messages before rate-limiting kicks in
      burst 10
    }
  }

}

