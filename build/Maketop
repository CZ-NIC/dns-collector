# Top part of Makefile for the UCW Libraries
# (c) 1997--2007 Martin Mares <mj@ucw.cz>

# Set to 1 if you want verbose output
V=0

# Disable all built-in rules and variables. Speeds up make and simplifies debugging.
MAKEFLAGS+=-rR

CFLAGS=$(CLANG) $(COPT) $(CDEBUG) $(CWARNS) -I. -I$(o) -I$(s)
LDFLAGS=$(LOPT)

DIRS=
PROGS=
CONFIGS=
TESTS=
EXTRA_RUNDIRS=tmp log
INSTALL_RUNDIRS=bin lib
API_INCLUDES=
API_LIBS=

# Various files whose type does not fit into PROGS
DATAFILES=

ifdef CONFIG_SHARED
LS=so
OS=oo
else
LS=a
OS=o
endif

ifdef CONFIG_DARWIN
SOEXT=bundle
else
SOEXT=so
endif

# Whenever "make -s" (silent) is run, turn on verbose mode (paradoxical, but gives the right result)
ifneq ($(findstring s,$(MAKEFLAGS)),)
V=1
endif

# Define M (message) and Q (quiet command prefix) macros and also MAKESILENT passed to sub-makes
ifeq ($(V),1)
M=@\#
Q=
MAKESILENT=
else
M=@echo #
Q=@
MAKESILENT=-s
endif

# Clean needs to be a double-colon rule since we want sub-makefiles to be able
# to define their own cleanup actions.
dust::
	rm -f `find . -path "*~" -or -name "\#*\#" -or -name core`
	rm -f allocs.tmp cscope.out TAGS

clean:: dust
	rm -rf obj tests run/{bin,lib,include,.tree-stamp}

distclean:: clean
	rm -rf run

testclean::
	rm -f `find obj -name "*.test"`

# Relative symlinks and other pathname manipulation macros
empty:=
space:=$(empty) $(empty)
backref=$(subst $(space),/,$(patsubst %,..,$(subst /,$(space),$(1))))
tack-on=$(if $(patsubst /%,,$(2)),$(1)/$(2),$(2))
symlink=ln -sf $(call tack-on,$(call backref,$(2)),$(1)) $(2)/
