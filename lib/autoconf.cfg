# Automatic configuration of the UCW Library
# (c) 2005 Martin Mares <mj@ucw.cz>

### Compiler and its Options ###

# Default compiler
Test("CC", "Checking for C compiler", sub { return "gcc"; });

# GCC version
Test("GCCVER", "Checking for GCC version", sub {
	my $gcc = Get("CC");
	my $ver = `$gcc --version | sed '2,\$d; s/^\\(.* \\)\\?\\([0-9]*\\.[0-9]*\\).*/\\2/'`;
	chomp $ver;
	Fail "Unable to determine GCC version" if $? || $ver eq "";
	return $ver;
});

# C flags: tell the compiler we're speaking C99
Set("CLANG" => "-std=gnu99");

# C optimizations
Set("COPT" => '-O2 -fstrict-aliasing -march=$(CPU_ARCH)');

# C optimizations for highly exposed code
Set("COPT2" => '-O3');

# Warnings
Set("CWARNS" => '-Wall -W -Wno-parentheses -Wstrict-prototypes -Wmissing-prototypes -Winline');

# Linker flags
Set("LOPT" => "");

# Extra libraries
Set("LIBS" => "");

# Extra flags for compiling and linking shared libraries
Set("CSHARED" => '-fPIC');
Set("LSHARED" => '-shared -Wl,-soname,lib/$(@F)');

# Extra switches depending on GCC version:
if (Get("GCCVER") eq "3.0") {
} elsif (Get("GCCVER") eq "3.3") {
	Append("CWARNS" => "-Wundef -Wredundant-decls");
	Append("COPT" => "-finline-limit=20000 --param max-inline-insns-auto=1000");
} elsif (Get("GCCVER") eq "3.4") {
	Append("CWARNS" => "-Wundef -Wredundant-decls");
	Append("COPT" => "-finline-limit=5000 --param large-function-insns=5000 --param inline-unit-growth=200 --param large-function-growth=400");
} else {
	Log "WARNING: Don't know anything about this GCC version, using default switches.\n";
}

if (IsSet("CONFIG_DEBUG")) {
	# If debugging:
	Set("DEBUG_ASSERTS");
	Set("DEBUG_DIE_BY_ABORT") if Get("CONFIG_DEBUG") > 1;
	Set("CDEBUG" => "-ggdb");
} else {
	# If building a release version:
	Append("COPT" => "-fomit-frame-pointer");
	Append("LOPT" => "-s");
}

# If debugging memory allocations:
#LIBS+=-lefence
#CDEBUG+=-DDEBUG_DMALLOC
#LIBS+=-ldmalloc

### CPU Type and Features ###

Set("CPU_ARCH" => 'i686') if !IsSet("CPU_ARCH");
Set("CPU_I386");
Set("CPU_LITTLE_ENDIAN");
#CPU_BIG_ENDIAN=1
Set("CPU_ALLOW_UNALIGNED");
Set("CPU_STRUCT_ALIGN" => 4);
Set("CPU_64BIT_POINTERS");

### OS Type ###

Set("CONFIG_LINUX");

# Return success
1;
