
collector {
  ### Input
  
  # Maximal length of packet data prefix to capture
  capture_limit 300

  ### Processing

  # Length of a time frame for request/response matching
  timeframe_length 5.0

  # Size of the hashtable to match requests to responses is 2^order
  hash_order 20

  ### Logging
  # as in libUCW?

  ### Outputs
  # Possible fields:
  #   flags client_addr client_port server_addr server_port id qname qtype qclass request_time_us request_flags request_length response_time_us response_flags response_length

  output_proto {
    path_template "out/matches-%Y%m%d-%H%M%S.pb.lz4"
    compression lz4-med
    period 30.0
    fields flags client_addr client_port qname qtype qclass id request_time_us request_flags response_time_us response_flags
  }

  output_csv {
    path_template "out/matches-%Y%m%d-%H%M%S.csv"
    compression none
    period 30.0
    fields flags client_addr client_port id qname qtype qclass request_time_us request_flags response_time_us response_flags
    separator "|"
    header 1
  }
  output_csv {
    path_template "out/matches-%Y%m%d-%H%M%S.csv.lz4"
    compression lz4-med
    period 30.0
    fields flags client_addr client_port id qname qtype qclass request_time_us request_flags response_time_us response_flags
    separator "|"
    header 1
  }

  output_pcap {
    path_template "out/dump-%Y%m%d-%H%M%S.pcap"
    compression none
    period 30.0
    dump_reasons other malformed fragmented protocol direction port bad_dns frame_full no_request

    # limiting ??
  }
}
